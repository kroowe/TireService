//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace TireService.Client.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAppSettingConstantsClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<AppSettingConstantView>> CreateAsync(AppSettingConstantCreateInfo appSettingConstantCreateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<AppSettingConstantView> Create(AppSettingConstantCreateInfo appSettingConstantCreateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<AppSettingConstantView>> CreateAsync(AppSettingConstantCreateInfo appSettingConstantCreateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<AppSettingConstantView>> UpdateAsync(string appSettingConstantKey, AppSettingConstantUpdateInfo appSettingConstantUpdateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<AppSettingConstantView> Update(string appSettingConstantKey, AppSettingConstantUpdateInfo appSettingConstantUpdateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<AppSettingConstantView>> UpdateAsync(string appSettingConstantKey, AppSettingConstantUpdateInfo appSettingConstantUpdateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(string appSettingConstantKey);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(string appSettingConstantKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(string appSettingConstantKey, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICatalogItemsClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CatalogItemView>> CreateAsync(CatalogItemInfo catalogItemCreateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<CatalogItemView> Create(CatalogItemInfo catalogItemCreateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CatalogItemView>> CreateAsync(CatalogItemInfo catalogItemCreateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CatalogItemView>> UpdateAsync(System.Guid catalogItemId, CatalogItemInfo catalogItemUpdateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<CatalogItemView> Update(System.Guid catalogItemId, CatalogItemInfo catalogItemUpdateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CatalogItemView>> UpdateAsync(System.Guid catalogItemId, CatalogItemInfo catalogItemUpdateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid catalogItemId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(System.Guid catalogItemId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid catalogItemId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<CatalogItemView>>> GetByCategoryAsync(System.Guid categoryId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<CatalogItemView>> GetByCategory(System.Guid categoryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<CatalogItemView>>> GetByCategoryAsync(System.Guid categoryId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICategoriesClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CategoryView>> CreateAsync(CategoryInfo categoryCreateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<CategoryView> Create(CategoryInfo categoryCreateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CategoryView>> CreateAsync(CategoryInfo categoryCreateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<CategoryView>>> GetAllAsync();

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<CategoryView>> GetAll();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<CategoryView>>> GetAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CategoryView>> UpdateAsync(System.Guid categoryId, CategoryInfo categoryUpdateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<CategoryView> Update(System.Guid categoryId, CategoryInfo categoryUpdateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<CategoryView>> UpdateAsync(System.Guid categoryId, CategoryInfo categoryUpdateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid categoryId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(System.Guid categoryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid categoryId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClientsClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ClientView>> CreateAsync(ClientCreateInfo clientCreateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<ClientView> Create(ClientCreateInfo clientCreateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ClientView>> CreateAsync(ClientCreateInfo clientCreateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ClientView>> UpdateAsync(System.Guid clientId, ClientUpdateInfo clientUpdateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<ClientView> Update(System.Guid clientId, ClientUpdateInfo clientUpdateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ClientView>> UpdateAsync(System.Guid clientId, ClientUpdateInfo clientUpdateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid clientId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(System.Guid clientId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid clientId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<ClientView>>> GetAllAsync(GetAllClientByFilterInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<ClientView>> GetAll(GetAllClientByFilterInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<ClientView>>> GetAllAsync(GetAllClientByFilterInfo info, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOrdersClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Guid>> CreateAsync(OrderCreateInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Guid> Create(OrderCreateInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Guid>> CreateAsync(OrderCreateInfo info, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Guid>> UpdateAsync(System.Guid orderId, OrderUpdateInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Guid> Update(System.Guid orderId, OrderUpdateInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Guid>> UpdateAsync(System.Guid orderId, OrderUpdateInfo info, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<OrderView>> GetOrderAsync(System.Guid orderId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<OrderView> GetOrder(System.Guid orderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<OrderView>> GetOrderAsync(System.Guid orderId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<OrderView>>> GetAllByFilterAsync(GetAllOrderByFilterInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<OrderView>> GetAllByFilter(GetAllOrderByFilterInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<OrderView>>> GetAllByFilterAsync(GetAllOrderByFilterInfo info, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<OrderCountsView>> GetCountByStatusesAsync();

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<OrderCountsView> GetCountByStatuses();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<OrderCountsView>> GetCountByStatusesAsync(System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<bool>> CancelOrderAsync(OrderCloseInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<bool> CancelOrder(OrderCloseInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<bool>> CancelOrderAsync(OrderCloseInfo info, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<bool>> PayOrderAsync(System.Guid orderId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<bool> PayOrder(System.Guid orderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<bool>> PayOrderAsync(System.Guid orderId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<bool>> TakeToWorkOrderAsync(System.Guid orderId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<bool> TakeToWorkOrder(System.Guid orderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<bool>> TakeToWorkOrderAsync(System.Guid orderId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPaymentRulesClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<PaymentRuleView>> CreateAsync(PaymentRuleInfo paymentRuleCreateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<PaymentRuleView> Create(PaymentRuleInfo paymentRuleCreateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<PaymentRuleView>> CreateAsync(PaymentRuleInfo paymentRuleCreateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<PaymentRuleView>> UpdateAsync(System.Guid paymentRuleId, PaymentRuleInfo paymentRuleUpdateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<PaymentRuleView> Update(System.Guid paymentRuleId, PaymentRuleInfo paymentRuleUpdateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<PaymentRuleView>> UpdateAsync(System.Guid paymentRuleId, PaymentRuleInfo paymentRuleUpdateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid paymentRuleId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(System.Guid paymentRuleId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid paymentRuleId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<PaymentRuleView>>> GetByWorkerAsync(System.Guid workerId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<PaymentRuleView>> GetByWorker(System.Guid workerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<PaymentRuleView>>> GetByWorkerAsync(System.Guid workerId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IReportsClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<IncomeStatementReportView>>> GetIncomeStatementReportAsync(GetIncomeStatementReportInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<IncomeStatementReportView>> GetIncomeStatementReport(GetIncomeStatementReportInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<IncomeStatementReportView>>> GetIncomeStatementReportAsync(GetIncomeStatementReportInfo info, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<ClientOrderHistoryReportView>>> GetClientOrderHistoryReportAsync(GetClientOrderHistoryReportInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<ClientOrderHistoryReportView>> GetClientOrderHistoryReport(GetClientOrderHistoryReportInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<ClientOrderHistoryReportView>>> GetClientOrderHistoryReportAsync(GetClientOrderHistoryReportInfo info, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<SliceCatalogItemsReportView>>> GetSliceCatalogItemsReportAsync(GetSliceCatalogItemsReportInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<SliceCatalogItemsReportView>> GetSliceCatalogItemsReport(GetSliceCatalogItemsReportInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<SliceCatalogItemsReportView>>> GetSliceCatalogItemsReportAsync(GetSliceCatalogItemsReportInfo info, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISalaryPaymentsToWorkerClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Guid>> CreateAsync(SalaryPaymentsToWorkerInfo salaryPaymentsToWorkerInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Guid> Create(SalaryPaymentsToWorkerInfo salaryPaymentsToWorkerInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Guid>> CreateAsync(SalaryPaymentsToWorkerInfo salaryPaymentsToWorkerInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid salaryPaymentsToWorkerId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(System.Guid salaryPaymentsToWorkerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid salaryPaymentsToWorkerId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IShiftWorksClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ShiftWorkView>> CreateAsync(ShiftWorkCreateInfo shiftWorkCreateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<ShiftWorkView> Create(ShiftWorkCreateInfo shiftWorkCreateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ShiftWorkView>> CreateAsync(ShiftWorkCreateInfo shiftWorkCreateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid shiftWorkId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(System.Guid shiftWorkId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid shiftWorkId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> OpenShiftWorkAsync(System.Guid shiftWorkId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse OpenShiftWork(System.Guid shiftWorkId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> OpenShiftWorkAsync(System.Guid shiftWorkId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> CloseShiftWorkAsync(System.Guid shiftWorkId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse CloseShiftWork(System.Guid shiftWorkId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> CloseShiftWorkAsync(System.Guid shiftWorkId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> AddWorkerToShiftWorkAsync(System.Guid shiftWorkId, System.Guid workerId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse AddWorkerToShiftWork(System.Guid shiftWorkId, System.Guid workerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> AddWorkerToShiftWorkAsync(System.Guid shiftWorkId, System.Guid workerId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> RemoveWorkerToShiftWorkAsync(System.Guid shiftWorkId, System.Guid workerId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse RemoveWorkerToShiftWork(System.Guid shiftWorkId, System.Guid workerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> RemoveWorkerToShiftWorkAsync(System.Guid shiftWorkId, System.Guid workerId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<ShiftWorkWithWorkersView>>> GetShiftWorksByStartDateAsync(GetShiftWorkByStartDate info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<ShiftWorkWithWorkersView>> GetShiftWorksByStartDate(GetShiftWorkByStartDate info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<ShiftWorkWithWorkersView>>> GetShiftWorksByStartDateAsync(GetShiftWorkByStartDate info, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ShiftWorkWithWorkersView>> GetCurrentShiftWorkAsync();

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<ShiftWorkWithWorkersView> GetCurrentShiftWork();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<ShiftWorkWithWorkersView>> GetCurrentShiftWorkAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IWorkersClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<WorkerView>> CreateAsync(WorkerCreateInfo workerCreateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<WorkerView> Create(WorkerCreateInfo workerCreateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<WorkerView>> CreateAsync(WorkerCreateInfo workerCreateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<WorkerView>> UpdateAsync(System.Guid workerId, WorkerUpdateInfo workerUpdateInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<WorkerView> Update(System.Guid workerId, WorkerUpdateInfo workerUpdateInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<WorkerView>> UpdateAsync(System.Guid workerId, WorkerUpdateInfo workerUpdateInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid workerId);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse Delete(System.Guid workerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> DeleteAsync(System.Guid workerId, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> SetDismissedAsync(System.Guid workerId, bool isDismissed);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse SetDismissed(System.Guid workerId, bool isDismissed);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse> SetDismissedAsync(System.Guid workerId, bool isDismissed, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<WorkerView>>> GetAllAsync(GetAllWorkerByFilterInfo getAllWorkerByFilterInfo);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<WorkerView>> GetAll(GetAllWorkerByFilterInfo getAllWorkerByFilterInfo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<WorkerView>>> GetAllAsync(GetAllWorkerByFilterInfo getAllWorkerByFilterInfo, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<WorkerWithBalanceAndSalaryPaymentView>>> GetAllWorkerWithBalanceAndSalaryPaymentAsync(GetAllWorkerWithBalanceAndSalaryPaymentInfo info);

        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TreesResponse<System.Collections.ObjectModel.ObservableCollection<WorkerWithBalanceAndSalaryPaymentView>> GetAllWorkerWithBalanceAndSalaryPayment(GetAllWorkerWithBalanceAndSalaryPaymentInfo info);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TreesResponse<System.Collections.ObjectModel.ObservableCollection<WorkerWithBalanceAndSalaryPaymentView>>> GetAllWorkerWithBalanceAndSalaryPaymentAsync(GetAllWorkerWithBalanceAndSalaryPaymentInfo info, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppSettingConstantView
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AppSettingConstantView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AppSettingConstantView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppSettingConstantCreateInfo
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AppSettingConstantCreateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AppSettingConstantCreateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppSettingConstantUpdateInfo
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AppSettingConstantUpdateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AppSettingConstantUpdateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CatalogItemView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CategoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Cost { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CatalogItemView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogItemView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CatalogItemInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid CategoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Cost { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CatalogItemInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogItemInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parentCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ParentCategoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryPath { get; set; }

        [Newtonsoft.Json.JsonProperty("levelCategoryPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LevelCategoryPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CategoryView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parentCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ParentCategoryId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CategoryInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenderInfo Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("carNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<string> CarNumber { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClientView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GenderInfo
    {

        Male = 0,

        Female = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientCreateInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Always)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Always)]
        public GenderInfo Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("carNumber", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IReadOnlyCollection<string> CarNumber { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClientCreateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientCreateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientUpdateInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Always)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("carNumber", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IReadOnlyCollection<string> CarNumber { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClientUpdateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientUpdateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllClientByFilterInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("carNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("clientIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<System.Guid> ClientIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAllClientByFilterInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllClientByFilterInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderCreateInfo
    {
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid ClientId { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftWorkWorkerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ShiftWorkWorkerId { get; set; }

        [Newtonsoft.Json.JsonProperty("clientComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientComment { get; set; }

        [Newtonsoft.Json.JsonProperty("taskOrders", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IReadOnlyCollection<TaskOrderInfo> TaskOrders { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderCreateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderCreateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskOrderInfo
    {
        [Newtonsoft.Json.JsonProperty("catalogItemId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CatalogItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaskOrderInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskOrderInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderUpdateInfo
    {
        [Newtonsoft.Json.JsonProperty("shiftWorkWorkerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ShiftWorkWorkerId { get; set; }

        [Newtonsoft.Json.JsonProperty("clientComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientComment { get; set; }

        [Newtonsoft.Json.JsonProperty("taskOrders", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IReadOnlyCollection<TaskOrderInfo> TaskOrders { get; set; } 

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderUpdateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderUpdateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientView Client { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftWorkWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShiftWorkWorkerView ShiftWorkWorker { get; set; }

        [Newtonsoft.Json.JsonProperty("taskOrders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<TaskOrderView> TaskOrders { get; set; }

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderStatusInfo OrderStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("clientComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientComment { get; set; }

        [Newtonsoft.Json.JsonProperty("closeComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloseComment { get; set; }

        [Newtonsoft.Json.JsonProperty("closedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ClosedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Summary { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShiftWorkWorkerView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid WorkerId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShiftWorkWorkerView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShiftWorkWorkerView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskOrderView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("catalogItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CatalogItemView CatalogItem { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaskOrderView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskOrderView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderStatusInfo
    {

        Created = 0,

        InWork = 1,

        Cancelled = 2,

        PaidFor = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllOrderByFilterInfo
    {
        [Newtonsoft.Json.JsonProperty("orderStatuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<OrderStatusInfo> OrderStatuses { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAllOrderByFilterInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllOrderByFilterInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderCountsView
    {
        [Newtonsoft.Json.JsonProperty("createdCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CreatedCount { get; set; }

        [Newtonsoft.Json.JsonProperty("inWorkCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InWorkCount { get; set; }

        [Newtonsoft.Json.JsonProperty("cancelledCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CancelledCount { get; set; }

        [Newtonsoft.Json.JsonProperty("paidForCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PaidForCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderCountsView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderCountsView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderCloseInfo
    {
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid OrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("closeComment", Required = Newtonsoft.Json.Required.Always)]
        public string CloseComment { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderCloseInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderCloseInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRuleView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("workerView", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerView WorkerView { get; set; }

        [Newtonsoft.Json.JsonProperty("salaryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalaryTypeInfo SalaryType { get; set; }

        [Newtonsoft.Json.JsonProperty("sumBySalaryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SumBySalaryType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PaymentRuleView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentRuleView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenderInfo Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        [Newtonsoft.Json.JsonProperty("isDismissed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDismissed { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkerView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkerView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalaryTypeInfo
    {

        PaymentPerDay = 0,

        PaymentPerMonth = 1,

        PaymentPieceWork = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRuleInfo
    {
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid WorkerId { get; set; }

        [Newtonsoft.Json.JsonProperty("salaryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalaryTypeInfo SalaryType { get; set; }

        [Newtonsoft.Json.JsonProperty("sumBySalaryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SumBySalaryType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PaymentRuleInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentRuleInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncomeStatementReportView
    {
        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime Day { get; set; }

        [Newtonsoft.Json.JsonProperty("expenses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Expenses { get; set; }

        [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Revenue { get; set; }

        [Newtonsoft.Json.JsonProperty("orderCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OrderCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IncomeStatementReportView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IncomeStatementReportView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetIncomeStatementReportInfo
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime EndDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetIncomeStatementReportInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetIncomeStatementReportInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientOrderHistoryReportView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenderInfo Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("carNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<string> CarNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentSum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal PaymentSum { get; set; }

        [Newtonsoft.Json.JsonProperty("orderHistoryReports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<OrderHistoryReportView> OrderHistoryReports { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClientOrderHistoryReportView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientOrderHistoryReportView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderHistoryReportView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderStatusInfo OrderStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("clientComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientComment { get; set; }

        [Newtonsoft.Json.JsonProperty("closeComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloseComment { get; set; }

        [Newtonsoft.Json.JsonProperty("closedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime ClosedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Summary { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderHistoryReportView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderHistoryReportView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetClientOrderHistoryReportInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("carNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("clientIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<System.Guid> ClientIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetClientOrderHistoryReportInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetClientOrderHistoryReportInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SliceCatalogItemsReportView
    {
        [Newtonsoft.Json.JsonProperty("catalogItemId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CatalogItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("catalogItemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CatalogItemName { get; set; }

        [Newtonsoft.Json.JsonProperty("catalogItemCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal CatalogItemCost { get; set; }

        [Newtonsoft.Json.JsonProperty("totalEarnedByCatalogItem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalEarnedByCatalogItem { get; set; }

        [Newtonsoft.Json.JsonProperty("countUsingForOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CountUsingForOrder { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SliceCatalogItemsReportView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SliceCatalogItemsReportView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSliceCatalogItemsReportInfo
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime EndDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSliceCatalogItemsReportInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSliceCatalogItemsReportInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalaryPaymentsToWorkerInfo
    {
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid WorkerId { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime PaymentDate { get; set; }

        [Newtonsoft.Json.JsonProperty("sum", Required = Newtonsoft.Json.Required.Always)]
        public decimal Sum { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalaryPaymentsToWorkerInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalaryPaymentsToWorkerInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShiftWorkView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("openedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? OpenedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("closedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ClosedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsOpen { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShiftWorkView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShiftWorkView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShiftWorkCreateInfo
    {
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShiftWorkCreateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShiftWorkCreateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShiftWorkWithWorkersView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("openedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? OpenedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsOpen { get; set; }

        [Newtonsoft.Json.JsonProperty("closedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ClosedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftWorkWorkers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<ShiftWorkWorkerView> ShiftWorkWorkers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShiftWorkWithWorkersView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShiftWorkWithWorkersView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetShiftWorkByStartDate
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; }

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; }

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Always)]
        public int Day { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetShiftWorkByStartDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetShiftWorkByStartDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerCreateInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Always)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Always)]
        public GenderInfo Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkerCreateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkerCreateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerUpdateInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Always)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkerUpdateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkerUpdateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllWorkerByFilterInfo
    {
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("isDismissed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDismissed { get; set; }

        [Newtonsoft.Json.JsonProperty("workerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<System.Guid> WorkerIds { get; set; }

        [Newtonsoft.Json.JsonProperty("excludeWorkerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<System.Guid> ExcludeWorkerIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAllWorkerByFilterInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllWorkerByFilterInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerWithBalanceAndSalaryPaymentView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("patronymic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patronymic { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        [Newtonsoft.Json.JsonProperty("isDismissed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDismissed { get; set; }

        [Newtonsoft.Json.JsonProperty("balanceSum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal BalanceSum { get; set; }

        [Newtonsoft.Json.JsonProperty("salaryPaymentsToWorkers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IReadOnlyCollection<SalaryPaymentsToWorkerView> SalaryPaymentsToWorkers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkerWithBalanceAndSalaryPaymentView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkerWithBalanceAndSalaryPaymentView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalaryPaymentsToWorkerView
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime PaymentDate { get; set; }

        [Newtonsoft.Json.JsonProperty("sum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Sum { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalaryPaymentsToWorkerView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalaryPaymentsToWorkerView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllWorkerWithBalanceAndSalaryPaymentInfo
    {
        [Newtonsoft.Json.JsonProperty("withDismissedWorkers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WithDismissedWorkers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAllWorkerWithBalanceAndSalaryPaymentInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllWorkerWithBalanceAndSalaryPaymentInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TreesResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public TreesResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TreesResponse<TResult> : TreesResponse
    {
        public TResult Result { get; private set; }

        public TreesResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603
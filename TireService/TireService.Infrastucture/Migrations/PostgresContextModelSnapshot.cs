// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TireService.Infrastructure;

#nullable disable

namespace TireService.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresContext))]
    partial class PostgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TireService.Infrastructure.Entities.AppSettingConstant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("AppSettingConstants");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string[]>("CarNumber")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientComment")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("CloseComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ShiftWorkWorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShiftWorkWorkerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.CatalogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("FirstVersionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FirstVersionId");

                    b.ToTable("CatalogItems");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryPath")
                        .IsRequired()
                        .HasColumnType("ltree");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.PaymentRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("SalaryType")
                        .HasColumnType("integer");

                    b.Property<decimal>("SumBySalaryType")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("PaymentRules");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.SalaryPaymentsToWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("SalaryPaymentsToWorkers");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.WorkerBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId")
                        .IsUnique();

                    b.ToTable("WorkerBalances");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.ShiftWork", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OpenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ShiftWorks");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.ShiftWorkWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShiftWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShiftWorkId");

                    b.HasIndex("WorkerId", "ShiftWorkId")
                        .IsUnique();

                    b.ToTable("ShiftWorkWorkers");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.TaskOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("TaskOrders");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.WarehouseItemHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("Count")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric");

                    b.Property<int>("WarehouseItemHistoryType")
                        .HasColumnType("integer");

                    b.Property<Guid>("WarehouseNomenclatureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseNomenclatureId");

                    b.ToTable("WarehouseItemHistory");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.WarehouseNomenclature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Article")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WarehouseNomenclatures");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Order", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TireService.Infrastructure.Entities.ShiftWorkWorker", "ShiftWorkWorker")
                        .WithMany()
                        .HasForeignKey("ShiftWorkWorkerId");

                    b.Navigation("Client");

                    b.Navigation("ShiftWorkWorker");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.CatalogItem", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.Settings.Category", "Category")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TireService.Infrastructure.Entities.Settings.CatalogItem", "FirstVersion")
                        .WithMany()
                        .HasForeignKey("FirstVersionId");

                    b.Navigation("Category");

                    b.Navigation("FirstVersion");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.Category", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.Settings.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.PaymentRule", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.Settings.Worker", "Worker")
                        .WithMany("PaymentRules")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.SalaryPaymentsToWorker", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.Settings.Worker", "Worker")
                        .WithMany("SalaryPaymentsToWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.WorkerBalance", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.Settings.Worker", "Worker")
                        .WithOne("WorkerBalance")
                        .HasForeignKey("TireService.Infrastructure.Entities.Settings.WorkerBalance", "WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.ShiftWorkWorker", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.ShiftWork", "ShiftWork")
                        .WithMany("ShiftWorkWorkers")
                        .HasForeignKey("ShiftWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TireService.Infrastructure.Entities.Settings.Worker", "Worker")
                        .WithMany("ShiftWorkWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftWork");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.TaskOrder", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.Settings.CatalogItem", "CatalogItem")
                        .WithMany()
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TireService.Infrastructure.Entities.Order", "Order")
                        .WithMany("TaskOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.WarehouseItemHistory", b =>
                {
                    b.HasOne("TireService.Infrastructure.Entities.WarehouseNomenclature", "WarehouseNomenclature")
                        .WithMany("WarehouseItemHistories")
                        .HasForeignKey("WarehouseNomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WarehouseNomenclature");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Order", b =>
                {
                    b.Navigation("TaskOrders");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.Category", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.Settings.Worker", b =>
                {
                    b.Navigation("PaymentRules");

                    b.Navigation("SalaryPaymentsToWorkers");

                    b.Navigation("ShiftWorkWorkers");

                    b.Navigation("WorkerBalance");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.ShiftWork", b =>
                {
                    b.Navigation("ShiftWorkWorkers");
                });

            modelBuilder.Entity("TireService.Infrastructure.Entities.WarehouseNomenclature", b =>
                {
                    b.Navigation("WarehouseItemHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
